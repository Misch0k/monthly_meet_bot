import os
import random
import json
from datetime import datetime, timedelta, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler,
    MessageHandler, filters
)
from dotenv import load_dotenv
import redis
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

DATE_THEMES = [
    "–í—Ä–µ–º—è –≥–æ–¥–∞ üå∏üçÇ‚ùÑÔ∏èüåû",
    "–≠–∫—Å—Ç—Ä–∏–º ü™ÇüèÑ‚Äç‚ôÇÔ∏èüßó‚Äç‚ôÄÔ∏è",
    "–í–æ–¥–∞ üåäüèä‚Äç‚ôÇÔ∏è‚õµ",
    "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ üß©‚ôüÔ∏èü§î",
    "–†–æ–º–∞–Ω—Ç–∏–∫–∞ üíïüåπüïØÔ∏è",
    "–ê—Ä–æ–º–∞—Ç üå∏üçãüïØÔ∏è",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚úàÔ∏èüó∫Ô∏èüß≥",
    "–ê–∑–∞—Ä—Ç üé≤‚ô†Ô∏èüé∞",
    "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, —Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å ü§ùüîäüíÜ‚Äç‚ôÇÔ∏è",
    "–í—ã—Å–æ—Ç–∞ üèîÔ∏èüèôÔ∏èüé¢",
    "–î–æ–º üè†üç≥üõãÔ∏è",
    "–ò—Å–∫—É—Å—Å—Ç–≤–æ üé®üñºÔ∏èüé≠",
    "–ù–∞—É–∫–∞ üî¨‚öóÔ∏èüß™",
    "–í–∫—É—Å üçΩÔ∏èüç∑üçì",
    "–î–µ—Ç—Å—Ç–≤–æ üß∏üéàü™Ä",
    "–®—É–º üîäüéµüé∏"
]

month_names = {
    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
    5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
    9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
}

class MonthlyMeetBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        self.redis_url = os.getenv('REDIS_URL')
        
        try:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

            parsed = redis.connection.parse_url(self.redis_url)
            self.redis_client = redis.Redis(
                host=parsed['host'],
                port=parsed['port'],
                password=parsed.get('password'),
                ssl=False,
                decode_responses=True
            )

            self.redis_client.ping()
            print("‚úÖ Redis Cloud –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        
    def get_user_data(self, user_id):
        data = self.redis_client.get(f'user:{user_id}')
        return json.loads(data) if data else None
    
    def set_user_data(self, user_id, data):
        self.redis_client.set(f'user:{user_id}', json.dumps(data))
    
    def get_pair_data(self, pair_id):
        data = self.redis_client.get(f'pair:{pair_id}')
        return json.loads(data) if data else None
    
    def set_pair_data(self, pair_id, data):
        self.redis_client.set(f'pair:{pair_id}', json.dumps(data))

    def get_all_pairs(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã"""
        pairs = []
        for key in self.redis_client.scan_iter('pair:*'):
            pair_data = self.get_pair_data(key.decode().split(':')[1])
            if pair_data:
                pairs.append(pair_data)
        return pairs
    
    def get_user_by_username(self, username):
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        username = username.lower().replace('@', '')
        for key in self.redis_client.scan_iter('user:*'):
            user_data = json.loads(self.redis_client.get(key))
            if user_data.get('username', '').lower().replace('@', '') == username:
                return user_data
        return None
    
    def get_random_theme(self):
        """–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è"""
        return random.choice(DATE_THEMES)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        user_data = self.get_user_data(user.id)
        if not user_data:
            user_data = {
                'id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'partner_id': None,
                'pending_requests': [],
                'pair_id': None,
                'registered_at': datetime.now().isoformat()
            }
            self.set_user_data(user.id, user_data)
            logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.id}")
        
        help_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π\n\n"
            "üìç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "*/start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π\n"
            "*/partner* - –£–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã\n"
            "*/status* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ\n"
            "*/cancel* - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "*/help* - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π */partner username*, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É\n"
            "‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏—Ç –∑–∞–ø—Ä–æ—Å –∏ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n"
            "‚Ä¢ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã —è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –±—É–¥—É:\n"
            "  - –í—ã–±–∏—Ä–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —Å–≤–∏–¥–∞–Ω–∏—è\n"
            "  - –í—ã–±–∏—Ä–∞—Ç—å –¥–∞—Ç—É –º–µ—Å—è—Ü–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ\n"
            "  - –í—ã–±–∏—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è\n"
            "  - –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–Ω–æ–π —Ç–µ–º—É –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–Ω–æ–π –¥–µ–Ω—å\n\n"
            "üß° *–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ —Å–≤–∏–¥–∞–Ω–∏—è–º–∏!*"
        )
        
        await update.message.reply_text(help_text, parse_mode='markdown')

    async def partner_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_data = self.get_user_data(user.id)
        
        if not user_data:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        if user_data.get('partner_id') and user_data.get('pair_id'):
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä")
            return
        
        if not context.args:
            await update.message.reply_text(
                "üë§ *–£–∫–∞–∑–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å username –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Å @)",
                parse_mode='markdown'
            )
            user_data['awaiting_partner_input'] = True
            self.set_user_data(user.id, user_data)
            return
        
        username = context.args[0]
        if not username.startswith('@'):
            username = '@' + username
        
        await self.process_partner_input(update, context, username)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user = update.effective_user
        user_data = self.get_user_data(user.id)
        
        if not user_data:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        if user_data.get('partner_id') and user_data.get('pair_id'):
            partner_data = self.get_user_data(user_data['partner_id'])
            
            status_text = (
                f"üìä *–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:*\n\n"
                f"üë• –ü–∞—Ä–∞ —Å @{partner_data['username']}\n"
            )
            
            await update.message.reply_text(status_text, parse_mode='markdown')
        else:
            await update.message.reply_text(
                "‚ùå –¢—ã –µ—â–µ –Ω–µ –≤ –ø–∞—Ä–µ\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /partner, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É"
            )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
        help_text = (
            "üìç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "*/start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π\n"
            "*/partner* - –£–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã\n"
            "*/status* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ\n"
            "*/cancel* - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "*/help* - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π */partner username*, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É\n"
            "‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏—Ç –∑–∞–ø—Ä–æ—Å –∏ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\n"
            "‚Ä¢ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã —è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –±—É–¥—É:\n"
            "  - –í—ã–±–∏—Ä–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —Å–≤–∏–¥–∞–Ω–∏—è\n"
            "  - –í—ã–±–∏—Ä–∞—Ç—å –¥–∞—Ç—É –º–µ—Å—è—Ü–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ\n"
            "  - –í—ã–±–∏—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è\n"
            "  - –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–Ω–æ–π —Ç–µ–º—É –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–Ω–æ–π –¥–µ–Ω—å\n\n"
            "üß° *–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ —Å–≤–∏–¥–∞–Ω–∏—è–º–∏!*"
        )
        
        await update.message.reply_text(help_text, parse_mode='markdown')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        user_data = self.get_user_data(user.id)
        
        if not user_data:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        if query.data.startswith('accept_'):
            partner_id = int(query.data.split('_')[1])
            await self.accept_pair_request(query, user_data, partner_id, context)
        
        elif query.data.startswith('reject_'):
            partner_id = int(query.data.split('_')[1])
            await self.reject_pair_request(query, user_data, partner_id, context)
        
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        text = update.message.text
        
        user_data = self.get_user_data(user.id)
        if not user_data:
            await self.start(update, context)
            return
        
        if user_data.get('awaiting_partner_input'):
            if text.startswith('@'):
                await self.process_partner_input(update, context, text)
            else:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ username –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Å @)\n"
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"
                )
        else:
            await update.message.reply_text(
                "ü§ñ *–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:*\n"
                "/partner - –£–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
                "/status - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å\n" 
                "/cancel - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞\n\n",
                parse_mode='markdown'
            )

    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        user = update.effective_user
        user_data = self.get_user_data(user.id)
        
        if not user_data:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        if user_data.get('awaiting_partner_input'):
            user_data['awaiting_partner_input'] = False
            self.set_user_data(user.id, user_data)
            await update.message.reply_text("‚úÖ –í–≤–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    async def set_bot_commands(self, application):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
        commands = [
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("partner", "–£–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞"),
            BotCommand("status", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
        ]
        await application.bot.set_my_commands(commands)
    
    async def process_partner_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, username: str):
        user = update.effective_user
        user_data = self.get_user_data(user.id)
        
        if user_data and user_data.get('awaiting_partner_input'):
            user_data['awaiting_partner_input'] = False
            self.set_user_data(user.id, user_data)
        
        partner_data = self.get_user_by_username(username)
        
        if not partner_data:
            bot_username = (await context.bot.get_me()).username
            invitation_text = (
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                f"üì© –û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É:\n"
                f"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–≤–∏–¥–∞–Ω–∏—è! "
                f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:\n"
                f"https://t.me/{bot_username}?start=invite_{user.id}\n\n"
            )
            
            await update.message.reply_text(invitation_text)
            return
        
        if partner_data['id'] == user.id:
            await update.message.reply_text("‚ùå –°–∞–º–æ–≤–ª—é–±–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –≤ –º–µ—Ä—É")
            return
        
        if user_data.get('partner_id'):
            await update.message.reply_text("‚ùå –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä")
            return
        
        if partner_data.get('partner_id'):
            await update.message.reply_text("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä")
            return
        
        if 'pending_requests' not in partner_data:
            partner_data['pending_requests'] = []
        
        existing_request = next((req for req in partner_data['pending_requests'] 
                            if req['from_user_id'] == user.id), None)
        
        if existing_request:
            await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
            return
        
        partner_data['pending_requests'].append({
            'from_user_id': user.id,
            'from_username': user.username,
            'timestamp': datetime.now().isoformat()
        })
        
        self.set_user_data(partner_data['id'], partner_data)
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_{user.id}'),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{user.id}')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await context.bot.send_message(
                chat_id=partner_data['id'],
                text=f"üíå –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å —Ç–æ–±–æ–π –ø–∞—Ä—É –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π\n\n"
                    f"–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:",
                reply_markup=reply_markup
            )
            await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
        except Exception as e:
            logger.error(f"Error sending request: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Ç–Ω–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –º–µ–Ω—è\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä—Ç–Ω–µ—Ä—É –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:\n"
                f"https://t.me/{(await context.bot.get_me()).username}?start=invite_{user.id}"
            )
    
    async def accept_pair_request(self, query, user_data, partner_id, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã"""
        partner_data = self.get_user_data(partner_id)
        if not partner_data:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        if user_data.get('partner_id'):
            await query.edit_message_text("‚ùå –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä")
            return
        
        if partner_data.get('partner_id'):
            await query.edit_message_text("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä")
            return
        
        if 'pending_requests' in user_data:
            user_data['pending_requests'] = [
                req for req in user_data['pending_requests'] 
                if req['from_user_id'] != partner_id
            ]
        
        pair_id = f"{min(user_data['id'], partner_id)}_{max(user_data['id'], partner_id)}"
        
        pair_data = {
            'id': pair_id,
            'user1_id': min(user_data['id'], partner_id),
            'user2_id': max(user_data['id'], partner_id),
            'created_at': datetime.now().isoformat(),
            'next_date': None,
            'organizer': None,
            'theme': None
        }
        
        user_data['partner_id'] = partner_id
        user_data['pair_id'] = pair_id
        
        partner_data['partner_id'] = user_data['id']
        partner_data['pair_id'] = pair_id
        
        self.set_user_data(user_data['id'], user_data)
        self.set_user_data(partner_data['id'], partner_data)
        self.set_pair_data(pair_id, pair_data)
        
        await query.edit_message_text("‚úÖ –ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–∏–¥–∞–Ω–∏—è—Ö")
        
        try:
            await context.bot.send_message(
                chat_id=partner_id,
                text=f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_data['username']} –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã!"
            )
        except Exception as e:
            logger.error(f"Error notifying partner: {e}")
    
    async def reject_pair_request(self, query, user_data, partner_id, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã"""
        if 'pending_requests' in user_data:
            user_data['pending_requests'] = [
                req for req in user_data['pending_requests'] 
                if req['from_user_id'] != partner_id
            ]
            self.set_user_data(user_data['id'], user_data)
        
        await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")

        try:
            await context.bot.send_message(
                chat_id=partner_id,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_data['username']} –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã"
            )
        except Exception as e:
            logger.error(f"Error notifying partner: {e}")

    async def monthly_planning(self, context: ContextTypes.DEFAULT_TYPE):
        """–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏–π"""
        try:
            logger.info("üìÖ –ù–∞—á–∞–ª–æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏–π")
            
            pairs = self.get_all_pairs()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(pairs)}")
            
            for pair_data in pairs:
                await self.plan_date_for_pair(pair_data, context.bot)
            
            logger.info("‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def plan_date_for_pair(self, pair_data, bot):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–≤–∏–¥–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
        try:
            pair_id = pair_data['id']
            
            organizer_id = random.choice([pair_data['user1_id'], pair_data['user2_id']])
            
            now = datetime.now()
            days_in_month = (datetime(now.year, now.month % 12 + 1, 1) - timedelta(days=1)).day
            selected_day = random.randint(4, days_in_month)
            
            theme = self.get_random_theme()
            
            notification_date = self.calculate_notification_date(now, selected_day)
            
            pair_data['organizer'] = organizer_id
            pair_data['next_date'] = selected_day
            pair_data['theme'] = theme
            pair_data['notification_sent'] = False
            pair_data['notification_date'] = notification_date.isoformat()
            
            self.set_pair_data(pair_id, pair_data)
            
            logger.info(f"‚úÖ –î–ª—è –ø–∞—Ä—ã {pair_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {selected_day} —á–∏—Å–ª–æ, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizer_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã {pair_data['id']}: {e}")

    def calculate_notification_date(self, current_date, selected_day):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        meeting_date = datetime(current_date.year, current_date.month, selected_day)
        
        notification_date = meeting_date - timedelta(days=3)
        notification_date = notification_date.replace(hour=9, minute=0, second=0, microsecond=0)
        
        return notification_date

    async def send_scheduled_notification(self, context: ContextTypes.DEFAULT_TYPE, pair_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            pair_data = self.get_pair_data(pair_id)
            if not pair_data:
                logger.error(f"‚ùå –ü–∞—Ä–∞ {pair_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            if pair_data.get('notification_sent'):
                logger.info(f"‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã {pair_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            
            organizer_id = pair_data['organizer']
            selected_day = pair_data['next_date']
            theme = pair_data['theme']
            
            current_month = datetime.now().month
            month_name = month_names[current_month]

            days_difference = selected_day - datetime.now().day
            
            await context.bot.send_message(
                chat_id=organizer_id,
                text=f"üéâ *–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ!*\n\n"
                     f"üìÖ –°–≤–∏–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å—Å—è {selected_day} {month_name}\n"
                     f"üé® –¢–µ–º–∞ —Å–≤–∏–¥–∞–Ω–∏—è: {theme}\n"
                     f"‚è∞ –£ —Ç–µ–±—è –µ—Å—Ç—å {days_difference} –¥–Ω—è –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!",
                parse_mode='markdown'
            )
            
            pair_data['notification_sent'] = True
            self.set_pair_data(pair_id, pair_data)
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É {organizer_id} (–æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_difference})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã {pair_id}: {e}")

    async def check_and_send_pending_notifications(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"""
        try:
            now = datetime.now()
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {now}")
            
            pairs = self.get_all_pairs()
            sent_count = 0
            
            for pair_data in pairs:
                if not pair_data.get('notification_sent'):
                    notification_date_str = pair_data.get('notification_date')
                    if notification_date_str:
                        notification_date = datetime.fromisoformat(notification_date_str)
                        
                        if now >= notification_date:
                            await self.send_scheduled_notification(context, pair_data['id'])
                            sent_count += 1
            
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    def run(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # application = Application.builder().token(self.token).build()

        application = (
            Application.builder()
            .token(self.token)
            .build()
        )
        
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("partner", self.partner_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("cancel", self.cancel_command))

        application.add_handler(CallbackQueryHandler(self.button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        if hasattr(application, 'job_queue') and application.job_queue:
            application.job_queue.run_monthly(
                self.monthly_planning,
                when=time(hour=5, minute=55),
                day=1,
                name="monthly_planning"
            )
            
            application.job_queue.run_daily(
                self.check_and_send_pending_notifications,
                time=time(hour=6, minute=0),
                name="daily_notification_check"
            )
            
            logger.info("‚úÖ JobQueue –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏–π")
        else:
            logger.error("‚ùå JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

        # application.run_polling(
        #     drop_pending_updates=True,
        #     allowed_updates=Update.ALL_TYPES
        # )

        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )

if __name__ == "__main__":
    bot = MonthlyMeetBot()
    bot.run()
